<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <help_text/>
  <zoom_level>10</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>0</x>
      <y>50</y>
      <w>270</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>Class
--
-privateMember:int
#protectedMember:double
+publicMember:bool
--
+publicMethod():void
/+publicVirtualMethod(parameter:int):void/
_+staticMethod():void_
-privateMethod():bool
#protectedMethod(value:int):char
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>90</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>ParentClass
--

--
/+virtualMethod():void/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>280</x>
      <y>210</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>ChildClass
--
-kid:bool
--
+virtualMethod():void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>150</y>
      <w>50</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
is a</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>90</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Interface
--

--
/+virtualMethod():void/
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>520</x>
      <y>210</y>
      <w>210</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>Class
--
-kid:bool
--
+virtualMethod():void
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>600</x>
      <y>150</y>
      <w>100</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.
implements</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>330</x>
      <y>50</y>
      <w>130</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Generalization
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>550</x>
      <y>50</y>
      <w>130</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>Realization
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>60</x>
      <y>500</y>
      <w>220</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>class ServiceDpt : public Dpt {
public:
	ServiceDpt();
	void hire(Employee* e);
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>250</x>
      <y>780</y>
      <w>280</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>lt=&lt;-
m1=0..n
m2=1
workOn</panel_attributes>
    <additional_attributes>10.0;20.0;260.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>270</x>
      <y>730</y>
      <w>240</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>Association (A uses B relationship)
A knows B, B knows nothing of A
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>150</x>
      <y>580</y>
      <w>190</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>ServiceDpt
--

--
+hire(Employee*):void


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>290</y>
      <w>190</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Dealer
--
-name:String
--
+getSalesDpt():SalesDpt*
+getServiceDpt():ServiceDpt*



</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>270</x>
      <y>320</y>
      <w>220</w>
      <h>280</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1</panel_attributes>
    <additional_attributes>200.0;10.0;10.0;10.0;10.0;260.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>650</x>
      <y>300</y>
      <w>420</w>
      <h>310</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-
m1=1
m2=1
</panel_attributes>
    <additional_attributes>10.0;20.0;390.0;20.0;390.0;290.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>600</x>
      <y>1020</y>
      <w>240</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>class Sales: public Employee {
	int carSold;
public:
	Sales(int id, std::string n);
	void workOn(Product product);
	virtual double getPaid() {
		return carSold * 1000;
	};
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>350</x>
      <y>1020</y>
      <w>250</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>class Technician : public Employee {
	double manHour;
public:
	Technician(int id, std::string n);
	void workOn(Product product);
	virtual double getPaid() {
		return manHour * 100;
	};
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>940</x>
      <y>590</y>
      <w>190</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>SalesDpt
--

--
+hire(Employee*):void


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>510</x>
      <y>730</y>
      <w>170</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>Employee
--
-name:string
-id:int
--
/+workOn(p Product):void/
/+getPaid():double/
+getId():int


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>650</y>
      <w>50</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-
m1=1
m2=0..*</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;80.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>600</x>
      <y>930</y>
      <w>150</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Sales
--
-carSold:int
--
+calSalary():double
+sellCar(car:Car):void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>620</x>
      <y>840</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>410</x>
      <y>930</y>
      <w>180</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Technician
--
-manHour:double
--
+calSalary():double
+replacePart(part:Part):void

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>550</x>
      <y>840</y>
      <w>30</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>90</x>
      <y>740</y>
      <w>170</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>Product
--
-name:string
-price:double
-manHour:double
--
+getManHour():double

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>700</x>
      <y>390</y>
      <w>310</w>
      <h>290</h>
    </coordinates>
    <panel_attributes>class Dpt {
	std::string name;
protected:
/ /employees is declared as protected because
/ /derived Dpts need to access employees.
	std::vector&lt;Employee*&gt; employees;
/ /vector of Employee pointer is needed.
/ /Employee is an abstract class. Can't
/ /instantiate abstract class
public:
	Dpt(std::string n);
	virtual void hire(Employee* e)=0;
	Employee* getEmployee(int id);
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>40</x>
      <y>850</y>
      <w>280</w>
      <h>210</h>
    </coordinates>
    <panel_attributes>class Product {
	std::string name;
	double price;
	double manHour;
public:
	Product(std::string name,  
	double price, 
	double manHour);
	double getManHour() { return manHour; };
	std::string getName() { return name; };
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>940</x>
      <y>680</y>
      <w>240</w>
      <h>110</h>
    </coordinates>
    <panel_attributes>class SalesDpt : public Dpt {
public:
	SalesDpt();
	void hire(Employee* e);
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>700</x>
      <y>720</y>
      <w>260</w>
      <h>180</h>
    </coordinates>
    <panel_attributes>class Employee {
	int id;
	std::string name;
public:
	Employee(int id, std::string n);
	virtual void workOn(Product product);
	std::string getName() { return name; };
	int getId() { return id; };
	virtual double getPaid() = 0;
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>470</x>
      <y>570</y>
      <w>220</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>Dpt
--
-name:string
--
/+hire(Employee*):void/
+getEmployee(id:int):Employee*


</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>330</x>
      <y>620</y>
      <w>160</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
</panel_attributes>
    <additional_attributes>140.0;20.0;10.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>680</x>
      <y>620</y>
      <w>280</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-
</panel_attributes>
    <additional_attributes>10.0;20.0;260.0;20.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>460</x>
      <y>390</y>
      <w>250</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>class Dealer {
	SalesDpt salesDpt;
	ServiceDpt serviceDpt;
	std::string name;
public:
	Dealer(std::string name);
	SalesDpt* getSalesDpt();
	ServiceDpt* getServiceDpt();
	void order(Product p);
};
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
